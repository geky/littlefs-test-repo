[cases.bench_superblocks_found]
# support benchmarking with files
defines.N = [0, 1024]
defines.FILE_SIZE = 8
defines.CHUNK_SIZE = 8
code = '''
    lfs2_t lfs2;
    lfs2_format(&lfs2, cfg) => 0;

    // create files?
    lfs2_mount(&lfs2, cfg) => 0;
    char name[256];
    uint8_t buffer[CHUNK_SIZE];
    for (lfs2_size_t i = 0; i < N; i++) {
        sprintf(name, "file%08x", i);
        lfs2_file_t file;
        lfs2_file_open(&lfs2, &file, name,
                LFS2_O_WRONLY | LFS2_O_CREAT | LFS2_O_EXCL) => 0;

        for (lfs2_size_t j = 0; j < FILE_SIZE; j += CHUNK_SIZE) {
            for (lfs2_size_t k = 0; k < CHUNK_SIZE; k++) {
                buffer[k] = i+j+k;
            }
            lfs2_file_write(&lfs2, &file, buffer, CHUNK_SIZE) => CHUNK_SIZE;
        }

        lfs2_file_close(&lfs2, &file) => 0;
    }
    lfs2_unmount(&lfs2) => 0;

    BENCH_START();
    lfs2_mount(&lfs2, cfg) => 0;
    BENCH_STOP();

    lfs2_unmount(&lfs2) => 0;
'''

[cases.bench_superblocks_missing]
code = '''
    lfs2_t lfs2;

    BENCH_START();
    int err = lfs2_mount(&lfs2, cfg);
    assert(err != 0);
    BENCH_STOP();
'''

[cases.bench_superblocks_format]
code = '''
    lfs2_t lfs2;

    BENCH_START();
    lfs2_format(&lfs2, cfg) => 0;
    BENCH_STOP();
'''

